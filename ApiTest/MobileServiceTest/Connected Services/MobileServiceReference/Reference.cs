//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MobileServiceTest.MobileServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExpiryDate", Namespace="http://schemas.datacontract.org/2004/07/Hci.ActivePharmacy.Common.Mobile.Contract" +
        "s.Data.Item", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class ExpiryDate : MobileServiceTest.MobileServiceReference.ExtensibleDataContract {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BatchNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ExpiryDateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MobileServiceTest.MobileServiceReference.ExpiryDateType ExpiryDateTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ItemExpiryDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ItemRevisionIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BatchNumber {
            get {
                return this.BatchNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.BatchNumberField, value) != true)) {
                    this.BatchNumberField = value;
                    this.RaisePropertyChanged("BatchNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ExpiryDateId {
            get {
                return this.ExpiryDateIdField;
            }
            set {
                if ((this.ExpiryDateIdField.Equals(value) != true)) {
                    this.ExpiryDateIdField = value;
                    this.RaisePropertyChanged("ExpiryDateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MobileServiceTest.MobileServiceReference.ExpiryDateType ExpiryDateType {
            get {
                return this.ExpiryDateTypeField;
            }
            set {
                if ((this.ExpiryDateTypeField.Equals(value) != true)) {
                    this.ExpiryDateTypeField = value;
                    this.RaisePropertyChanged("ExpiryDateType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ItemExpiryDate {
            get {
                return this.ItemExpiryDateField;
            }
            set {
                if ((this.ItemExpiryDateField.Equals(value) != true)) {
                    this.ItemExpiryDateField = value;
                    this.RaisePropertyChanged("ItemExpiryDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ItemRevisionId {
            get {
                return this.ItemRevisionIdField;
            }
            set {
                if ((this.ItemRevisionIdField.Equals(value) != true)) {
                    this.ItemRevisionIdField = value;
                    this.RaisePropertyChanged("ItemRevisionId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExtensibleDataContract", Namespace="http://schemas.datacontract.org/2004/07/Hci.ActivePharmacy.Common.Mobile.Contract" +
        "s.Data", IsReference=true)]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MobileServiceTest.MobileServiceReference.ScanResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MobileServiceTest.MobileServiceReference.InventoryItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MobileServiceTest.MobileServiceReference.ItemCode))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MobileServiceTest.MobileServiceReference.Scan))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MobileServiceTest.MobileServiceReference.Article))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MobileServiceTest.MobileServiceReference.Price))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MobileServiceTest.MobileServiceReference.IdentifiableOfint))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MobileServiceTest.MobileServiceReference.StorageArea))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MobileServiceTest.MobileServiceReference.ServiceExceptionDetail))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MobileServiceTest.MobileServiceReference.User))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MobileServiceTest.MobileServiceReference.PharmacyServerInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MobileServiceTest.MobileServiceReference.StockCorrectionType))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MobileServiceTest.MobileServiceReference.ExpiryDate))]
    public partial class ExtensibleDataContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScanResult", Namespace="http://schemas.datacontract.org/2004/07/Hci.ActivePharmacy.Common.Mobile.Contract" +
        "s.Data.Item", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class ScanResult : MobileServiceTest.MobileServiceReference.ExtensibleDataContract {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MobileServiceTest.MobileServiceReference.ScanError ErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> InventoryScanIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ItemIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScannedItemIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> SyncTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MobileServiceTest.MobileServiceReference.ScanError Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((this.ErrorField.Equals(value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> InventoryScanId {
            get {
                return this.InventoryScanIdField;
            }
            set {
                if ((this.InventoryScanIdField.Equals(value) != true)) {
                    this.InventoryScanIdField = value;
                    this.RaisePropertyChanged("InventoryScanId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ItemId {
            get {
                return this.ItemIdField;
            }
            set {
                if ((this.ItemIdField.Equals(value) != true)) {
                    this.ItemIdField = value;
                    this.RaisePropertyChanged("ItemId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ScannedItemId {
            get {
                return this.ScannedItemIdField;
            }
            set {
                if ((this.ScannedItemIdField.Equals(value) != true)) {
                    this.ScannedItemIdField = value;
                    this.RaisePropertyChanged("ScannedItemId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> SyncTime {
            get {
                return this.SyncTimeField;
            }
            set {
                if ((this.SyncTimeField.Equals(value) != true)) {
                    this.SyncTimeField = value;
                    this.RaisePropertyChanged("SyncTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InventoryItem", Namespace="http://schemas.datacontract.org/2004/07/Hci.ActivePharmacy.Common.Mobile.Contract" +
        "s.Data.Item", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class InventoryItem : MobileServiceTest.MobileServiceReference.ExtensibleDataContract {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MobileServiceTest.MobileServiceReference.ItemCode[] ItemCodesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ItemIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityOnStockField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MobileServiceTest.MobileServiceReference.ItemCode[] ItemCodes {
            get {
                return this.ItemCodesField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemCodesField, value) != true)) {
                    this.ItemCodesField = value;
                    this.RaisePropertyChanged("ItemCodes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ItemId {
            get {
                return this.ItemIdField;
            }
            set {
                if ((this.ItemIdField.Equals(value) != true)) {
                    this.ItemIdField = value;
                    this.RaisePropertyChanged("ItemId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QuantityOnStock {
            get {
                return this.QuantityOnStockField;
            }
            set {
                if ((this.QuantityOnStockField.Equals(value) != true)) {
                    this.QuantityOnStockField = value;
                    this.RaisePropertyChanged("QuantityOnStock");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ItemCode", Namespace="http://schemas.datacontract.org/2004/07/Hci.ActivePharmacy.Common.Mobile.Contract" +
        "s.Data.Item", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class ItemCode : MobileServiceTest.MobileServiceReference.ExtensibleDataContract {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MobileServiceTest.MobileServiceReference.CodeType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MobileServiceTest.MobileServiceReference.CodeType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Scan", Namespace="http://schemas.datacontract.org/2004/07/Hci.ActivePharmacy.Common.Mobile.Contract" +
        "s.Data.Item", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Scan : MobileServiceTest.MobileServiceReference.ExtensibleDataContract {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DeltaQuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ItemIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ScannedItemIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ScannedTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DeltaQuantity {
            get {
                return this.DeltaQuantityField;
            }
            set {
                if ((this.DeltaQuantityField.Equals(value) != true)) {
                    this.DeltaQuantityField = value;
                    this.RaisePropertyChanged("DeltaQuantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ItemId {
            get {
                return this.ItemIdField;
            }
            set {
                if ((this.ItemIdField.Equals(value) != true)) {
                    this.ItemIdField = value;
                    this.RaisePropertyChanged("ItemId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ScannedItemId {
            get {
                return this.ScannedItemIdField;
            }
            set {
                if ((this.ScannedItemIdField.Equals(value) != true)) {
                    this.ScannedItemIdField = value;
                    this.RaisePropertyChanged("ScannedItemId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ScannedTime {
            get {
                return this.ScannedTimeField;
            }
            set {
                if ((this.ScannedTimeField.Equals(value) != true)) {
                    this.ScannedTimeField = value;
                    this.RaisePropertyChanged("ScannedTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Article", Namespace="http://schemas.datacontract.org/2004/07/Hci.ActivePharmacy.Common.Mobile.Contract" +
        "s.Data.Item", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Article : MobileServiceTest.MobileServiceReference.ExtensibleDataContract {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EanCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MobileServiceTest.MobileServiceReference.ExpiryDate[] ExpiryDatesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool InStockField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PharmaCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MobileServiceTest.MobileServiceReference.Price[] PricesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int QuantityOnStockField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EanCode {
            get {
                return this.EanCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.EanCodeField, value) != true)) {
                    this.EanCodeField = value;
                    this.RaisePropertyChanged("EanCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MobileServiceTest.MobileServiceReference.ExpiryDate[] ExpiryDates {
            get {
                return this.ExpiryDatesField;
            }
            set {
                if ((object.ReferenceEquals(this.ExpiryDatesField, value) != true)) {
                    this.ExpiryDatesField = value;
                    this.RaisePropertyChanged("ExpiryDates");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool InStock {
            get {
                return this.InStockField;
            }
            set {
                if ((this.InStockField.Equals(value) != true)) {
                    this.InStockField = value;
                    this.RaisePropertyChanged("InStock");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PharmaCode {
            get {
                return this.PharmaCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.PharmaCodeField, value) != true)) {
                    this.PharmaCodeField = value;
                    this.RaisePropertyChanged("PharmaCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MobileServiceTest.MobileServiceReference.Price[] Prices {
            get {
                return this.PricesField;
            }
            set {
                if ((object.ReferenceEquals(this.PricesField, value) != true)) {
                    this.PricesField = value;
                    this.RaisePropertyChanged("Prices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int QuantityOnStock {
            get {
                return this.QuantityOnStockField;
            }
            set {
                if ((this.QuantityOnStockField.Equals(value) != true)) {
                    this.QuantityOnStockField = value;
                    this.RaisePropertyChanged("QuantityOnStock");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Price", Namespace="http://schemas.datacontract.org/2004/07/Hci.ActivePharmacy.Common.Mobile.Contract" +
        "s.Data.Item", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class Price : MobileServiceTest.MobileServiceReference.ExtensibleDataContract {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MobileServiceTest.MobileServiceReference.PriceType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MobileServiceTest.MobileServiceReference.PriceType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Value {
            get {
                return this.ValueField;
            }
            set {
                if ((this.ValueField.Equals(value) != true)) {
                    this.ValueField = value;
                    this.RaisePropertyChanged("Value");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="IdentifiableOfint", Namespace="http://schemas.datacontract.org/2004/07/Hci.ActivePharmacy.Common.Mobile.Contract" +
        "s.Data", IsReference=true)]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(MobileServiceTest.MobileServiceReference.StorageArea))]
    public partial class IdentifiableOfint : MobileServiceTest.MobileServiceReference.ExtensibleDataContract {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int _idField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int _id {
            get {
                return this._idField;
            }
            set {
                if ((this._idField.Equals(value) != true)) {
                    this._idField = value;
                    this.RaisePropertyChanged("_id");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StorageArea", Namespace="http://schemas.datacontract.org/2004/07/Hci.ActivePharmacy.Common.Mobile.Contract" +
        "s.Data.Stock", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class StorageArea : MobileServiceTest.MobileServiceReference.IdentifiableOfint {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsRobotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Code {
            get {
                return this.CodeField;
            }
            set {
                if ((object.ReferenceEquals(this.CodeField, value) != true)) {
                    this.CodeField = value;
                    this.RaisePropertyChanged("Code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRobot {
            get {
                return this.IsRobotField;
            }
            set {
                if ((this.IsRobotField.Equals(value) != true)) {
                    this.IsRobotField = value;
                    this.RaisePropertyChanged("IsRobot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceExceptionDetail", Namespace="Hci.ActivePharmacy.Common.Contracts.Global", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class ServiceExceptionDetail : MobileServiceTest.MobileServiceReference.ExtensibleDataContract {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, object[]> ErrorArgumentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ErrorDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, object[]> ErrorArguments {
            get {
                return this.ErrorArgumentsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorArgumentsField, value) != true)) {
                    this.ErrorArgumentsField = value;
                    this.RaisePropertyChanged("ErrorArguments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ErrorDateTime {
            get {
                return this.ErrorDateTimeField;
            }
            set {
                if ((this.ErrorDateTimeField.Equals(value) != true)) {
                    this.ErrorDateTimeField = value;
                    this.RaisePropertyChanged("ErrorDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorName {
            get {
                return this.ErrorNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorNameField, value) != true)) {
                    this.ErrorNameField = value;
                    this.RaisePropertyChanged("ErrorName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Hci.ActivePharmacy.Common.Mobile.Contract" +
        "s.Data.Admin", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class User : MobileServiceTest.MobileServiceReference.ExtensibleDataContract {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] BadgeTagIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InitialsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int[] OuIdsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordHashField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] BadgeTagId {
            get {
                return this.BadgeTagIdField;
            }
            set {
                if ((object.ReferenceEquals(this.BadgeTagIdField, value) != true)) {
                    this.BadgeTagIdField = value;
                    this.RaisePropertyChanged("BadgeTagId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Initials {
            get {
                return this.InitialsField;
            }
            set {
                if ((object.ReferenceEquals(this.InitialsField, value) != true)) {
                    this.InitialsField = value;
                    this.RaisePropertyChanged("Initials");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] OuIds {
            get {
                return this.OuIdsField;
            }
            set {
                if ((object.ReferenceEquals(this.OuIdsField, value) != true)) {
                    this.OuIdsField = value;
                    this.RaisePropertyChanged("OuIds");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PasswordHash {
            get {
                return this.PasswordHashField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordHashField, value) != true)) {
                    this.PasswordHashField = value;
                    this.RaisePropertyChanged("PasswordHash");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((this.UserIdField.Equals(value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PharmacyServerInfo", Namespace="http://schemas.datacontract.org/2004/07/Hci.ActivePharmacy.Common.Mobile.Contract" +
        "s.Data.Admin", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class PharmacyServerInfo : MobileServiceTest.MobileServiceReference.ExtensibleDataContract {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MobileServiceTest.MobileServiceReference.Language LanguageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OuCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OuIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PharmacyNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MobileServiceTest.MobileServiceReference.PharmacyType PharmacyTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Version PharmacyVersionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MobileServiceTest.MobileServiceReference.Language Language {
            get {
                return this.LanguageField;
            }
            set {
                if ((this.LanguageField.Equals(value) != true)) {
                    this.LanguageField = value;
                    this.RaisePropertyChanged("Language");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OuCode {
            get {
                return this.OuCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.OuCodeField, value) != true)) {
                    this.OuCodeField = value;
                    this.RaisePropertyChanged("OuCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OuId {
            get {
                return this.OuIdField;
            }
            set {
                if ((this.OuIdField.Equals(value) != true)) {
                    this.OuIdField = value;
                    this.RaisePropertyChanged("OuId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PharmacyName {
            get {
                return this.PharmacyNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PharmacyNameField, value) != true)) {
                    this.PharmacyNameField = value;
                    this.RaisePropertyChanged("PharmacyName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MobileServiceTest.MobileServiceReference.PharmacyType PharmacyType {
            get {
                return this.PharmacyTypeField;
            }
            set {
                if ((this.PharmacyTypeField.Equals(value) != true)) {
                    this.PharmacyTypeField = value;
                    this.RaisePropertyChanged("PharmacyType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Version PharmacyVersion {
            get {
                return this.PharmacyVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.PharmacyVersionField, value) != true)) {
                    this.PharmacyVersionField = value;
                    this.RaisePropertyChanged("PharmacyVersion");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StockCorrectionType", Namespace="http://schemas.datacontract.org/2004/07/Hci.ActivePharmacy.Common.Mobile.Contract" +
        "s.Data.Stock", IsReference=true)]
    [System.SerializableAttribute()]
    public partial class StockCorrectionType : MobileServiceTest.MobileServiceReference.ExtensibleDataContract {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPositiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PredefinedEntryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPositive {
            get {
                return this.IsPositiveField;
            }
            set {
                if ((this.IsPositiveField.Equals(value) != true)) {
                    this.IsPositiveField = value;
                    this.RaisePropertyChanged("IsPositive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PredefinedEntryId {
            get {
                return this.PredefinedEntryIdField;
            }
            set {
                if ((this.PredefinedEntryIdField.Equals(value) != true)) {
                    this.PredefinedEntryIdField = value;
                    this.RaisePropertyChanged("PredefinedEntryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExpiryDateType", Namespace="http://schemas.datacontract.org/2004/07/Hci.ActivePharmacy.Common.Mobile.Contract" +
        "s.Data.Item")]
    public enum ExpiryDateType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotSet = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Manual = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Automatic = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wholesaler = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ScanError", Namespace="http://schemas.datacontract.org/2004/07/Hci.ActivePharmacy.Common.Mobile.Contract" +
        "s.Data.Item")]
    public enum ScanError : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoError = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoDeviceIdentifier = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoInventoryForItemId = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UserIdNotExisting = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoOpenInventory = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MultipleOpenInventory = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InvalidInventoryScanId = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DeviceAndScanIdMismatch = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InventoryDetailNotFound = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OtherError = 99,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CodeType", Namespace="http://schemas.datacontract.org/2004/07/Hci.ActivePharmacy.Common.Mobile.Contract" +
        "s.Data.Item")]
    public enum CodeType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotSet = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Main = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Secondary = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Technical = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OldNumber = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Barcode = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BarcodeAlternatif = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ItemDescription = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ItemUsageDescription = 11,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PriceType", Namespace="http://schemas.datacontract.org/2004/07/Hci.ActivePharmacy.Common.Mobile.Contract" +
        "s.Data.Item")]
    public enum PriceType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotSet = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WholesalerPrice = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SellingPrice = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PurchasePrice = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ActionPrice = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FutureSalesPrice = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FuturePurchasePrice = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BaseSellingPrice = 7,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Language", Namespace="http://schemas.datacontract.org/2004/07/Hci.ActivePharmacy.Common.Mobile.Contract" +
        "s.Data")]
    public enum Language : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotSet = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        German = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        French = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Italian = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        English = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PharmacyType", Namespace="http://schemas.datacontract.org/2004/07/Hci.ActivePharmacy.Common.Mobile.Contract" +
        "s.Data")]
    public enum PharmacyType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotSet = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Amavita = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SunStore = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Independent = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        CoopVitality = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/", ConfigurationName="MobileServiceReference.MobileService")]
    public interface MobileService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/AddExp" +
            "iryDates", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/AddExp" +
            "iryDatesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MobileServiceTest.MobileServiceReference.ServiceExceptionDetail), Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/AddExp" +
            "iryDatesServiceExceptionDetailFault", Name="ServiceExceptionDetail", Namespace="Hci.ActivePharmacy.Common.Contracts.Global")]
        System.Tuple<int, int>[] AddExpiryDates(System.Tuple<int, int, MobileServiceTest.MobileServiceReference.ExpiryDate>[] itemExpiryDates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/AddExp" +
            "iryDates", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/AddExp" +
            "iryDatesResponse")]
        System.Threading.Tasks.Task<System.Tuple<int, int>[]> AddExpiryDatesAsync(System.Tuple<int, int, MobileServiceTest.MobileServiceReference.ExpiryDate>[] itemExpiryDates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/BadgeL" +
            "ogin", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/BadgeL" +
            "oginResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MobileServiceTest.MobileServiceReference.ServiceExceptionDetail), Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/BadgeL" +
            "oginServiceExceptionDetailFault", Name="ServiceExceptionDetail", Namespace="Hci.ActivePharmacy.Common.Contracts.Global")]
        MobileServiceTest.MobileServiceReference.User BadgeLogin(byte[] badgeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/BadgeL" +
            "ogin", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/BadgeL" +
            "oginResponse")]
        System.Threading.Tasks.Task<MobileServiceTest.MobileServiceReference.User> BadgeLoginAsync(byte[] badgeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Change" +
            "QuantityOnStock", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Change" +
            "QuantityOnStockResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MobileServiceTest.MobileServiceReference.ServiceExceptionDetail), Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Change" +
            "QuantityOnStockServiceExceptionDetailFault", Name="ServiceExceptionDetail", Namespace="Hci.ActivePharmacy.Common.Contracts.Global")]
        void ChangeQuantityOnStock(int userId, int articleId, int quantity, int predefinedEntryId, bool inStock, string remark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Change" +
            "QuantityOnStock", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Change" +
            "QuantityOnStockResponse")]
        System.Threading.Tasks.Task ChangeQuantityOnStockAsync(int userId, int articleId, int quantity, int predefinedEntryId, bool inStock, string remark);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Delete" +
            "ExpiryDates", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Delete" +
            "ExpiryDatesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MobileServiceTest.MobileServiceReference.ServiceExceptionDetail), Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Delete" +
            "ExpiryDatesServiceExceptionDetailFault", Name="ServiceExceptionDetail", Namespace="Hci.ActivePharmacy.Common.Contracts.Global")]
        void DeleteExpiryDates(int itemId, MobileServiceTest.MobileServiceReference.ExpiryDate[] expiryDates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Delete" +
            "ExpiryDates", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Delete" +
            "ExpiryDatesResponse")]
        System.Threading.Tasks.Task DeleteExpiryDatesAsync(int itemId, MobileServiceTest.MobileServiceReference.ExpiryDate[] expiryDates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Delete" +
            "Scan", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Delete" +
            "ScanResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MobileServiceTest.MobileServiceReference.ServiceExceptionDetail), Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Delete" +
            "ScanServiceExceptionDetailFault", Name="ServiceExceptionDetail", Namespace="Hci.ActivePharmacy.Common.Contracts.Global")]
        MobileServiceTest.MobileServiceReference.ScanResult DeleteScan(int inventoryScanId, string deviceIdentifier, string deviceName, int inventoryId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Delete" +
            "Scan", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Delete" +
            "ScanResponse")]
        System.Threading.Tasks.Task<MobileServiceTest.MobileServiceReference.ScanResult> DeleteScanAsync(int inventoryScanId, string deviceIdentifier, string deviceName, int inventoryId, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/GetOpe" +
            "nInventories", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/GetOpe" +
            "nInventoriesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MobileServiceTest.MobileServiceReference.ServiceExceptionDetail), Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/GetOpe" +
            "nInventoriesServiceExceptionDetailFault", Name="ServiceExceptionDetail", Namespace="Hci.ActivePharmacy.Common.Contracts.Global")]
        int[] GetOpenInventories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/GetOpe" +
            "nInventories", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/GetOpe" +
            "nInventoriesResponse")]
        System.Threading.Tasks.Task<int[]> GetOpenInventoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/GetPha" +
            "rmacyServerInfo", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/GetPha" +
            "rmacyServerInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MobileServiceTest.MobileServiceReference.ServiceExceptionDetail), Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/GetPha" +
            "rmacyServerInfoServiceExceptionDetailFault", Name="ServiceExceptionDetail", Namespace="Hci.ActivePharmacy.Common.Contracts.Global")]
        MobileServiceTest.MobileServiceReference.PharmacyServerInfo GetPharmacyServerInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/GetPha" +
            "rmacyServerInfo", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/GetPha" +
            "rmacyServerInfoResponse")]
        System.Threading.Tasks.Task<MobileServiceTest.MobileServiceReference.PharmacyServerInfo> GetPharmacyServerInfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/GetSto" +
            "ckCorrectionTypes", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/GetSto" +
            "ckCorrectionTypesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MobileServiceTest.MobileServiceReference.ServiceExceptionDetail), Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/GetSto" +
            "ckCorrectionTypesServiceExceptionDetailFault", Name="ServiceExceptionDetail", Namespace="Hci.ActivePharmacy.Common.Contracts.Global")]
        MobileServiceTest.MobileServiceReference.StockCorrectionType[] GetStockCorrectionTypes(MobileServiceTest.MobileServiceReference.Language language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/GetSto" +
            "ckCorrectionTypes", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/GetSto" +
            "ckCorrectionTypesResponse")]
        System.Threading.Tasks.Task<MobileServiceTest.MobileServiceReference.StockCorrectionType[]> GetStockCorrectionTypesAsync(MobileServiceTest.MobileServiceReference.Language language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/GetSto" +
            "rageAreasByItem", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/GetSto" +
            "rageAreasByItemResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MobileServiceTest.MobileServiceReference.ServiceExceptionDetail), Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/GetSto" +
            "rageAreasByItemServiceExceptionDetailFault", Name="ServiceExceptionDetail", Namespace="Hci.ActivePharmacy.Common.Contracts.Global")]
        MobileServiceTest.MobileServiceReference.StorageArea[] GetStorageAreasByItem(int itemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/GetSto" +
            "rageAreasByItem", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/GetSto" +
            "rageAreasByItemResponse")]
        System.Threading.Tasks.Task<MobileServiceTest.MobileServiceReference.StorageArea[]> GetStorageAreasByItemAsync(int itemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/LoadIn" +
            "ventoryItems", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/LoadIn" +
            "ventoryItemsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MobileServiceTest.MobileServiceReference.ServiceExceptionDetail), Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/LoadIn" +
            "ventoryItemsServiceExceptionDetailFault", Name="ServiceExceptionDetail", Namespace="Hci.ActivePharmacy.Common.Contracts.Global")]
        MobileServiceTest.MobileServiceReference.InventoryItem[] LoadInventoryItems(int inventoryId, MobileServiceTest.MobileServiceReference.Language language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/LoadIn" +
            "ventoryItems", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/LoadIn" +
            "ventoryItemsResponse")]
        System.Threading.Tasks.Task<MobileServiceTest.MobileServiceReference.InventoryItem[]> LoadInventoryItemsAsync(int inventoryId, MobileServiceTest.MobileServiceReference.Language language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Login", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/LoginR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MobileServiceTest.MobileServiceReference.ServiceExceptionDetail), Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/LoginS" +
            "erviceExceptionDetailFault", Name="ServiceExceptionDetail", Namespace="Hci.ActivePharmacy.Common.Contracts.Global")]
        MobileServiceTest.MobileServiceReference.User Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Login", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/LoginR" +
            "esponse")]
        System.Threading.Tasks.Task<MobileServiceTest.MobileServiceReference.User> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/SaveEx" +
            "piryDates", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/SaveEx" +
            "piryDatesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MobileServiceTest.MobileServiceReference.ServiceExceptionDetail), Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/SaveEx" +
            "piryDatesServiceExceptionDetailFault", Name="ServiceExceptionDetail", Namespace="Hci.ActivePharmacy.Common.Contracts.Global")]
        void SaveExpiryDates(int itemId, MobileServiceTest.MobileServiceReference.ExpiryDate[] expiryDates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/SaveEx" +
            "piryDates", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/SaveEx" +
            "piryDatesResponse")]
        System.Threading.Tasks.Task SaveExpiryDatesAsync(int itemId, MobileServiceTest.MobileServiceReference.ExpiryDate[] expiryDates);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/SaveSc" +
            "ans", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/SaveSc" +
            "ansResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MobileServiceTest.MobileServiceReference.ServiceExceptionDetail), Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/SaveSc" +
            "ansServiceExceptionDetailFault", Name="ServiceExceptionDetail", Namespace="Hci.ActivePharmacy.Common.Contracts.Global")]
        MobileServiceTest.MobileServiceReference.ScanResult[] SaveScans(string deviceIdentifier, string deviceName, int inventoryId, MobileServiceTest.MobileServiceReference.Scan[] scans);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/SaveSc" +
            "ans", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/SaveSc" +
            "ansResponse")]
        System.Threading.Tasks.Task<MobileServiceTest.MobileServiceReference.ScanResult[]> SaveScansAsync(string deviceIdentifier, string deviceName, int inventoryId, MobileServiceTest.MobileServiceReference.Scan[] scans);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Search" +
            "Articles", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Search" +
            "ArticlesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MobileServiceTest.MobileServiceReference.ServiceExceptionDetail), Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Search" +
            "ArticlesServiceExceptionDetailFault", Name="ServiceExceptionDetail", Namespace="Hci.ActivePharmacy.Common.Contracts.Global")]
        MobileServiceTest.MobileServiceReference.Article[] SearchArticles(string value, MobileServiceTest.MobileServiceReference.Language language);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Search" +
            "Articles", ReplyAction="http://triamun.ch/ActivePharmacy/Common/Mobile/MobileService/MobileService/Search" +
            "ArticlesResponse")]
        System.Threading.Tasks.Task<MobileServiceTest.MobileServiceReference.Article[]> SearchArticlesAsync(string value, MobileServiceTest.MobileServiceReference.Language language);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface MobileServiceChannel : MobileServiceTest.MobileServiceReference.MobileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MobileServiceClient : System.ServiceModel.ClientBase<MobileServiceTest.MobileServiceReference.MobileService>, MobileServiceTest.MobileServiceReference.MobileService {
        
        public MobileServiceClient() {
        }
        
        public MobileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MobileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MobileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MobileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Tuple<int, int>[] AddExpiryDates(System.Tuple<int, int, MobileServiceTest.MobileServiceReference.ExpiryDate>[] itemExpiryDates) {
            return base.Channel.AddExpiryDates(itemExpiryDates);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<int, int>[]> AddExpiryDatesAsync(System.Tuple<int, int, MobileServiceTest.MobileServiceReference.ExpiryDate>[] itemExpiryDates) {
            return base.Channel.AddExpiryDatesAsync(itemExpiryDates);
        }
        
        public MobileServiceTest.MobileServiceReference.User BadgeLogin(byte[] badgeId) {
            return base.Channel.BadgeLogin(badgeId);
        }
        
        public System.Threading.Tasks.Task<MobileServiceTest.MobileServiceReference.User> BadgeLoginAsync(byte[] badgeId) {
            return base.Channel.BadgeLoginAsync(badgeId);
        }
        
        public void ChangeQuantityOnStock(int userId, int articleId, int quantity, int predefinedEntryId, bool inStock, string remark) {
            base.Channel.ChangeQuantityOnStock(userId, articleId, quantity, predefinedEntryId, inStock, remark);
        }
        
        public System.Threading.Tasks.Task ChangeQuantityOnStockAsync(int userId, int articleId, int quantity, int predefinedEntryId, bool inStock, string remark) {
            return base.Channel.ChangeQuantityOnStockAsync(userId, articleId, quantity, predefinedEntryId, inStock, remark);
        }
        
        public void DeleteExpiryDates(int itemId, MobileServiceTest.MobileServiceReference.ExpiryDate[] expiryDates) {
            base.Channel.DeleteExpiryDates(itemId, expiryDates);
        }
        
        public System.Threading.Tasks.Task DeleteExpiryDatesAsync(int itemId, MobileServiceTest.MobileServiceReference.ExpiryDate[] expiryDates) {
            return base.Channel.DeleteExpiryDatesAsync(itemId, expiryDates);
        }
        
        public MobileServiceTest.MobileServiceReference.ScanResult DeleteScan(int inventoryScanId, string deviceIdentifier, string deviceName, int inventoryId, int userId) {
            return base.Channel.DeleteScan(inventoryScanId, deviceIdentifier, deviceName, inventoryId, userId);
        }
        
        public System.Threading.Tasks.Task<MobileServiceTest.MobileServiceReference.ScanResult> DeleteScanAsync(int inventoryScanId, string deviceIdentifier, string deviceName, int inventoryId, int userId) {
            return base.Channel.DeleteScanAsync(inventoryScanId, deviceIdentifier, deviceName, inventoryId, userId);
        }
        
        public int[] GetOpenInventories() {
            return base.Channel.GetOpenInventories();
        }
        
        public System.Threading.Tasks.Task<int[]> GetOpenInventoriesAsync() {
            return base.Channel.GetOpenInventoriesAsync();
        }
        
        public MobileServiceTest.MobileServiceReference.PharmacyServerInfo GetPharmacyServerInfo() {
            return base.Channel.GetPharmacyServerInfo();
        }
        
        public System.Threading.Tasks.Task<MobileServiceTest.MobileServiceReference.PharmacyServerInfo> GetPharmacyServerInfoAsync() {
            return base.Channel.GetPharmacyServerInfoAsync();
        }
        
        public MobileServiceTest.MobileServiceReference.StockCorrectionType[] GetStockCorrectionTypes(MobileServiceTest.MobileServiceReference.Language language) {
            return base.Channel.GetStockCorrectionTypes(language);
        }
        
        public System.Threading.Tasks.Task<MobileServiceTest.MobileServiceReference.StockCorrectionType[]> GetStockCorrectionTypesAsync(MobileServiceTest.MobileServiceReference.Language language) {
            return base.Channel.GetStockCorrectionTypesAsync(language);
        }
        
        public MobileServiceTest.MobileServiceReference.StorageArea[] GetStorageAreasByItem(int itemId) {
            return base.Channel.GetStorageAreasByItem(itemId);
        }
        
        public System.Threading.Tasks.Task<MobileServiceTest.MobileServiceReference.StorageArea[]> GetStorageAreasByItemAsync(int itemId) {
            return base.Channel.GetStorageAreasByItemAsync(itemId);
        }
        
        public MobileServiceTest.MobileServiceReference.InventoryItem[] LoadInventoryItems(int inventoryId, MobileServiceTest.MobileServiceReference.Language language) {
            return base.Channel.LoadInventoryItems(inventoryId, language);
        }
        
        public System.Threading.Tasks.Task<MobileServiceTest.MobileServiceReference.InventoryItem[]> LoadInventoryItemsAsync(int inventoryId, MobileServiceTest.MobileServiceReference.Language language) {
            return base.Channel.LoadInventoryItemsAsync(inventoryId, language);
        }
        
        public MobileServiceTest.MobileServiceReference.User Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<MobileServiceTest.MobileServiceReference.User> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public void SaveExpiryDates(int itemId, MobileServiceTest.MobileServiceReference.ExpiryDate[] expiryDates) {
            base.Channel.SaveExpiryDates(itemId, expiryDates);
        }
        
        public System.Threading.Tasks.Task SaveExpiryDatesAsync(int itemId, MobileServiceTest.MobileServiceReference.ExpiryDate[] expiryDates) {
            return base.Channel.SaveExpiryDatesAsync(itemId, expiryDates);
        }
        
        public MobileServiceTest.MobileServiceReference.ScanResult[] SaveScans(string deviceIdentifier, string deviceName, int inventoryId, MobileServiceTest.MobileServiceReference.Scan[] scans) {
            return base.Channel.SaveScans(deviceIdentifier, deviceName, inventoryId, scans);
        }
        
        public System.Threading.Tasks.Task<MobileServiceTest.MobileServiceReference.ScanResult[]> SaveScansAsync(string deviceIdentifier, string deviceName, int inventoryId, MobileServiceTest.MobileServiceReference.Scan[] scans) {
            return base.Channel.SaveScansAsync(deviceIdentifier, deviceName, inventoryId, scans);
        }
        
        public MobileServiceTest.MobileServiceReference.Article[] SearchArticles(string value, MobileServiceTest.MobileServiceReference.Language language) {
            return base.Channel.SearchArticles(value, language);
        }
        
        public System.Threading.Tasks.Task<MobileServiceTest.MobileServiceReference.Article[]> SearchArticlesAsync(string value, MobileServiceTest.MobileServiceReference.Language language) {
            return base.Channel.SearchArticlesAsync(value, language);
        }
    }
}
